// Copyright (c) 2025, qleonardolp
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef ROS2_IMPEDANCE_CONTROLLER__ROS2_IMPEDANCE_CONTROLLER_HPP_
#define ROS2_IMPEDANCE_CONTROLLER__ROS2_IMPEDANCE_CONTROLLER_HPP_

#include <eigen3/Eigen/Dense>

#include <memory>
#include <string>
#include <unordered_map>
#include <vector>

#include <dart/dart.hpp>
#include <dart/utils/urdf/DartLoader.hpp>
#include "controller_interface/controller_interface.hpp"
#include "geometry_msgs/msg/pose.hpp"
#include "hardware_interface/loaned_command_interface.hpp"
#include "hardware_interface/loaned_state_interface.hpp"
#include "hardware_interface/types/hardware_interface_type_values.hpp"
#include "rclcpp/rclcpp.hpp"
#include "rclcpp/subscription.hpp"
#include "rclcpp_lifecycle/state.hpp"
#include "realtime_tools/realtime_buffer.hpp"

// auto-generated by generate_parameter_library
#include "ros2_impedance_controller/ros2_impedance_controller_parameters.hpp"

namespace ros2_impedance_controller
{
using ReferenceType = geometry_msgs::msg::Pose;

using DiagonalMatrix6d = Eigen::DiagonalMatrix<double, 6>;

const uint kMaxJointSpaceSize = 16;
/**
 * Avoid dynamic allocation in the update loop by using
 * a large constant sizeEigen::Vector. If the manipulator
 * has more the 16 DOFs them it should be increased.
 */
using JointSpaceVector = Eigen::Matrix<double, kMaxJointSpaceSize, 1>;

enum InterfaceType : uint8_t
{
  POSITION,
  VELOCITY,
  EFFORT
};

std::unordered_map<std::string, InterfaceType> InterfaceMap = {
  {hardware_interface::HW_IF_POSITION, InterfaceType::POSITION},
  {hardware_interface::HW_IF_VELOCITY, InterfaceType::VELOCITY},
  {hardware_interface::HW_IF_EFFORT, InterfaceType::EFFORT},
};

/**
 * \brief Cartesian Impedance Controller for Manipulators.
 */
class ImpedanceController : public controller_interface::ControllerInterface
{
public:
  ImpedanceController();

  ~ImpedanceController() = default;

  // Indicating which command interfaces are to be claimed.
  controller_interface::InterfaceConfiguration command_interface_configuration() const override;

  // Indicating which state interfaces are to be claimed.
  controller_interface::InterfaceConfiguration state_interface_configuration() const override;

  controller_interface::CallbackReturn on_init() override;

  controller_interface::CallbackReturn on_configure(
    const rclcpp_lifecycle::State & previous_state) override;

  controller_interface::CallbackReturn on_activate(
    const rclcpp_lifecycle::State & previous_state) override;

  controller_interface::CallbackReturn on_deactivate(
    const rclcpp_lifecycle::State & previous_state) override;

  controller_interface::return_type update(
    const rclcpp::Time & time, const rclcpp::Duration & period) override;

protected:
  bool configure_robot_model();

  bool update_robot_model_states();

  void declare_parameters();

  controller_interface::CallbackReturn read_parameters();

  std::shared_ptr<ParamListener> param_listener_;
  Params params_;

private:
  void robot_description_param_cb(std::shared_future<std::vector<rclcpp::Parameter>> future);

  std::shared_ptr<rclcpp::AsyncParametersClient> parameters_client_;
  std::string robot_urdf_;

  std::vector<std::string> joint_names_;
  std::vector<std::string> command_interface_types_;
  std::vector<std::string> state_interface_types_;

  std::vector<std::reference_wrapper<hardware_interface::LoanedCommandInterface>>
    ordered_cmd_interfaces_;

  std::vector<std::reference_wrapper<hardware_interface::LoanedStateInterface>>
    ordered_state_interfaces_;

  bool has_effort_states_{true};
  bool debug_gravity_{true};

  double update_rate_;

  // Kinematics parameters
  std::string base_link_;
  std::string interaction_link_;
  size_t degrees_of_freedom_{1};

  /* Task space stiffness and damping */
  DiagonalMatrix6d taskspace_stiffness_;
  DiagonalMatrix6d taskspace_damping_;

  JointSpaceVector joint_positions_;
  JointSpaceVector joint_velocities_;

  Eigen::VectorXd desired_effort_;

  /* DART members */
  dart::dynamics::SkeletonPtr robot_skeleton_;
  dart::dynamics::BodyNodePtr robot_base_;
  dart::dynamics::BodyNodePtr robot_end_effector_;

  /// The equilibrium (target) pose for the impedance model
  dart::dynamics::SimpleFramePtr desired_frame_;

  /* Controller Reference Subscriber */
  realtime_tools::RealtimeBuffer<std::shared_ptr<ReferenceType>> rt_reference_ptr_;
  rclcpp::Subscription<ReferenceType>::SharedPtr reference_subscriber_;
};

}  // namespace ros2_impedance_controller

#endif  // ROS2_IMPEDANCE_CONTROLLER__ROS2_IMPEDANCE_CONTROLLER_HPP_
